// <auto-generated />
using System;
using ClassRoom.Infrastracture;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClassRoom.Infrastracture.Migrations
{
    [DbContext(typeof(ClassRoomDbContext))]
    partial class ClassRoomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassRoom.Domain.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("ClassRoom.Domain.ClassRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<short>("ClassRoomTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ClassRoomTypeId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("ClassRoom.Domain.ClassRoomType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClassRoomTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)0,
                            Description = "Не указано"
                        },
                        new
                        {
                            Id = (short)1,
                            Description = "Лекционное"
                        },
                        new
                        {
                            Id = (short)2,
                            Description = "Для практических занятий"
                        },
                        new
                        {
                            Id = (short)3,
                            Description = "Спортзал"
                        },
                        new
                        {
                            Id = (short)4,
                            Description = "Прочее"
                        });
                });

            modelBuilder.Entity("ClassRoom.Domain.ClassRoom", b =>
                {
                    b.HasOne("ClassRoom.Domain.Building", "Building")
                        .WithMany("ClassRooms")
                        .HasForeignKey("BuildingId");

                    b.HasOne("ClassRoom.Domain.ClassRoomType", "ClassRoomType")
                        .WithMany("ClassRooms")
                        .HasForeignKey("ClassRoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("ClassRoomType");
                });

            modelBuilder.Entity("ClassRoom.Domain.Building", b =>
                {
                    b.Navigation("ClassRooms");
                });

            modelBuilder.Entity("ClassRoom.Domain.ClassRoomType", b =>
                {
                    b.Navigation("ClassRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
